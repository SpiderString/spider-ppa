local binaryOperators="[%+%-%*/%^%%,]"
local unaryOperators="[!]"


local variableDef={}
function setVariables()
  run("SpiderCalc/calcLib")
  local variables=getVariables()
  if SPIDERCALCLASTANS==nil then SPIDERCALCLASTANS=0 end
  if SPIDERCALCVARIABLES==nil then SPIDERCALCVARIABLES={} end
  for id, var in pairs(variables) do
    if SPIDERCALCVARIABLES[var]==nil then SPIDERCALCVARIABLES[var]=0 end
  end
  for id, var in pairs(SPIDERCALCVARIABLES) do
    if var==nil then SPIDERCALCVARIABLES[id]=0 end
    variableDef[id]=SPIDERCALCVARIABLES[id]
  end
  --constant definition
  variableDef["pi"]=math.pi
  variableDef["e"]=math.e
  variableDef["tau"]=2*math.pi
  variableDef["ans"]=SPIDERCALCLASTANS
end
setVariables()
local multiVariableFunc={"log", "sto", "atan", "arctan", "lcm", "gcd"} --table of functions which can accept variable amounts of arguments
local variableHandlingFunc={"sto"} --table of functions which handle variables as strings

run("SpiderCalc/calcLib")
function push(stack, token)
  table.insert(stack, 1, token)
end
function pop(stack)
  return table.remove(stack, 1)
end
function reverseStack(stack)
  local outputStack={}
  while stack[1]~=nil do
    push(outputStack, pop(stack))
  end
  return outputStack
end

function matchMultiVarFunc(token)
  local foundMatch=false
  local matchFunc=nil
  if token~=nil then
    for id, func in pairs(multiVariableFunc) do
      if token:match(func) then
        foundMatch=true
        matchFunc=func
      end
    end
  end
  return foundMatch, matchFunc
end

function matchVariableHandlingFunc(token)
  local foundMatch=false
  local matchFunc=nil
  if token~=nil then
    for id, func in pairs(variableHandlingFunc) do
      if token:match(func) then
        foundMatch=true
        matchFunc=func
      end
    end
  end
  return foundMatch, matchFunc
end

--grabs next non-comma operator after a comma or function
function getNextOperator(stack)
  local counter=1
  local token=stack[counter]
  local foundOp=false
  local foundComma=false
  while token~=nil and not foundOp do
    run("SpiderCalc/calcLib")
    if foundComma then
      if (matchFunction(token) or isOperator(token)) and token~="," then
        foundOp=true
      else
        counter=counter+1
        token=stack[counter]
      end
    else
      if token=="," then
        foundComma=true
      else
        counter=counter+1
        token=stack[counter]
      end
    end
  end
  return foundOp, token
end   

function factorial(int)
  if math.floor(int) ~= int then
    --error("factorial: argument must be an integer")
    return 0/0
  end
  if int < 0 then
    --error("factorial: argument must be non-negative")
    return 0/0
  end
  if int == 0 then
    return 1
  else
    return int*factorial(int-1)
  end
end

function convertVariables(token)
  local output=token
  if matchVariable(token) then
    output=variableDef[token]
  end
  return output
end



--Euclid's Algorithm to get the GCD of two numbers
function euclid(a, b)
  local output
  if b==0 then output=a 
  else output=euclid(b, a % b) end
  return output
end
--gets the GCD of a series
function gcd(args)
  local output
  if args[2]==nil then
    return args[1]
  elseif args[3]==nil then
    output=euclid(args[1], args[2])
  else
    local lastArg=table.remove(args)
    output=euclid(gcd(args), lastArg)
  end
  return output
end
--gets the LCM of a series by the GCD
function lcm(args)
  local output
  if args[2]==nil then
    return args[1]
  elseif args[3]==nil then
    output=math.abs(args[1]*args[2])/euclid(args[1], args[2])
  else
    local lastArg=table.remove(args)
    output=lcm({lcm(args), lastArg})
  end
  return output
end

--takes a postfix expression and evaluates it
function evaluate(eq)
  local op={} --operand table
  eq=reverseStack(eq)
  local outputStack={}
  while eq[1]~=nil do
    local token=pop(eq)
    local foundOp, nextOp = getNextOperator(eq)
    if isNumber(token) then
      push(outputStack, tonumber(token))
    --is a variable
    elseif matchVariable(token) then
      --pushes variable value for numerical purposes
      if not matchVariableHandlingFunc(nextOp) then
        push(outputStack, variableDef[token])
      --pushes variable identifier for functions
      else
        push(outputStack, token)
      end
    --token is an operator or function
    else
      --doesn't reset operands if it's a multivariable function or it's a comma
      if not (matchMultiVarFunc(token) or token==",") then
        op={}
      end
      if token:match(binaryOperators) then
        local op_2=pop(outputStack)
        local op_1=pop(outputStack)
        if token~="," then
          op_2=convertVariables(op_2)
          op_1=convertVariables(op_1)
        end
        --use insert for the "," operator
        table.insert(op, op_1)
        table.insert(op, op_2)

        if token:match("[%+]") then
          push(outputStack, op[1]+op[2])
        elseif token:match("[%-]") then
          if op[2]~=nil then
            push(outputStack, op[1]-op[2])
          else
            --negative numbers should be handled, but it doesn't hurt.
            push(outputStack, -op[1])
          end
        elseif token:match("[%*]") then
          push(outputStack, op[1]*op[2])
        elseif token:match("[/]") then
          push(outputStack, op[1]/op[2])
        elseif token:match("[%^]") then
          push(outputStack, math.pow(op[1], op[2]))
        elseif token:match("[%%]") then
          push(outputStack, math.fmod(op[1], op[2]))
        end
        --prevents issues with commas not reseting operands
        if token~="," then
          op={}
        end
      elseif token:match(unaryOperators) then
        op[1]=pop(outputStack)
        op[1]=convertVariables(op[1])
        if token:match("[!]") then
          push(outputStack, factorial(op[1]))
        end
      elseif matchFunction(token) then
        --doesn't run if it isn't nil, in the case of multivariable functions
        if op[1]==nil then op[1]=pop(outputStack) end

        if not matchVariableHandlingFunc(token) then
          op[1]=convertVariables(op[1])
        end
        if token=="sqrt" then
          push(outputStack, math.sqrt(op[1]))
        elseif token=="cbrt" then
          push(outputStack, math.pow(op[1], 1/3))
        elseif token=="ln" then
          push(outputStack, math.ln(op[1]))
        --one or two variable function
        elseif token=="log" then
          if op[2]~=nil then
            --base is the first argument for whatever reason.
            push(outputStack, math.log(convertVariables(op[2]), convertVariables(op[1])))
          else
            push(outputStack, math.log(op[1]))
          end
        elseif token=="floor" then
          push(outputStack, math.floor(op[1]))
        elseif token=="ceil" then
          push(outputStack, math.ceil(op[1]))
        --Trig Functions
        elseif token=="sin" then
          --sin(pi) is inaccurate 
          if math.abs(math.fmod(op[1], math.pi)) < 0.001 then 
            push(outputStack, 0)
          else
            push(outputStack, math.sin(op[1]))
          end
        elseif token=="cos" then
          --cos(pi/2) is inaccurate
          if math.abs(math.fmod(op[1]-math.pi/2, math.pi)) < 0.001 then 
            push(outputStack, 0)
          else
            push(outputStack, math.cos(op[1]))
          end
        elseif token=="tan" then
          if math.abs(math.fmod(op[1], math.pi)) < 0.001 then 
            push(outputStack, 0)
          elseif math.abs(math.fmod(op[1]-math.pi/2, math.pi)) < 0.001 then
            push(outputStack, 1/0)
          else
            push(outputStack, math.tan(op[1]))
          end
        --secondary trig functions
        elseif token=="sec" then
          if math.abs(math.fmod(op[1]-math.pi/2, math.pi)) < 0.001 then 
            push(outputStack, 1/0)
          else
            push(outputStack, 1/math.cos(op[1]))
          end
        elseif token=="csc" then
          if math.abs(math.fmod(op[1]-math.pi/2, math.pi)) < 0.001 then 
            push(outputStack, 1/0)
          else
            push(outputStack, 1/math.cos(op[1]))
          end
        elseif token=="cot" then
          if math.abs(math.fmod(op[1], math.pi)) < 0.001 then 
            push(outputStack, 1/0)
          elseif math.abs(math.fmod(op[1]-math.pi/2, math.pi)) < 0.001 then
            push(outputStack, 0)
          else
            push(outputStack, 1/math.tan(op[1]))
          end
        --inverse trig functions
        elseif token=="asin" or token=="arcsin" then
          push(outputStack, math.asin(op[1]))
        elseif token=="acos" or token=="arccos" then
          push(outputStack, math.acos(op[1]))
        elseif token=="atan" or token=="arctan" then
          if op[2]~=nil then
            --atan(x,y)
            push(outputStack, math.atan2(op[2], op[1]))
          else
            push(outputStack, math.atan(op[1]))
          end
        elseif token=="asec" or token=="arcsec" then
          --arcsec(x)=arccos(1/x)
          push(outputStack, math.acos(1/op[1]))
        elseif token=="acsc" or token=="arccsc" then
          --arccsc(x)=pi/2-arcsec(x) = pi/2 - arccos(1/x)
          push(outputStack, math.pi/2 - math.acos(1/op[1]))
        elseif token=="acot" or token=="arccot" then
          push(outputStack, math.pi/2 - math.atan(op[1]))
        --hyperbolic functions
        elseif token=="sinh" then
          push(outputStack, (math.e^op[1] - math.e^(-op[1]))/2)
        elseif token=="cosh" then
          push(outputStack, (math.e^op[1] + math.e^(-op[1]))/2)
        elseif token=="tanh" then
          push(outputStack, (math.e^op[1] - math.e^(-op[1]))/(math.e^op[1]+math.e^(-op[1])))
        elseif token=="sech" then
          push(outputStack, 2/(math.e^op[1] + math.e^(-op[1])))
        elseif token=="csch" then
          push(outputStack, 2/(math.e^op[1] - math.e^(-op[1])))
        elseif token=="coth" then
          push(outputStack, (math.e^op[1] + math.e^(-op[1]))/(math.e^op[1] - math.e^(-op[1])))
        --inverse hyperbolic functions
        elseif token=="arsinh" then
          push(outputStack, math.ln(op[1] + math.sqrt(op[1]^2 + 1)))
        elseif token=="arcosh" then
          push(outputStack, math.ln(op[1] + math.sqrt(op[1]^2 - 1)))
        elseif token=="artanh" then
          push(outputStack, 0.5*math.ln((1+op[1])/(1-op[1])))
        elseif token=="arsech" then
          push(outputStack, math.ln((1+math.sqrt(1-op[1]^2))/op[1]))
        elseif token=="arcsch" then
          push(outputStack, math.ln((1+math.sqrt(1+op[1]^2))/op[1]))
        elseif token=="arcoth" then
          push(outputStack, 0.5*math.ln((x+1)/(x-1)))
        elseif token=="abs" then
          push(outputStack, math.abs(op[1]))
        elseif token=="lcm" then
          push(outputStack, lcm(op))
        elseif token=="gcd" then
          push(outputStack, gcd(op))
        elseif token=="sto" then
          SPIDERCALCVARIABLES[op[2]]=op[1]
          push(outputStack, op[1])
        end
      end
    end
  end
  return pop(outputStack)
end
