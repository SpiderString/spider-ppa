--Returns table of the file with indices by line
function cat (_file, doStoreLines)
  if doStoreLines == nil then doStoreLines=false end
  local _index=1
  local _output={}
  for line in io.lines(_file) do
    _output[_index]=line
    _index=_index+1
  end
  if doStoreLines then
    _output["lines"]=_index - 1 --stores number of lines
  end
  return _output
end
--returns table of the file with indices by line
--uses a path relative to the .minecraft/mods/advancedMacros folder
function catRel(file, doStoreLines)
  if doStoreLines==nil then doStoreLines=false end
  local index=0
  local output={}
  local file=filesystem.open(file, "r")
  while file:available()>0 do
    table.insert(output, file:readLine())
    index=index+1
  end
  if doStoreLines then
    output["lines"]=index
  end
  file:close()
  return output
end


--Returns table of fields from a string with given delimeter
function split (_str, _del)
  local _output={}
  local _index=1
  for _word in _str:gsub(";;","; ;"):gmatch("[^".._del.."]+") do 
    _output[_index]=_word
    _index=_index+1
  end
  _output["length"]=_index-1
  return _output
end

--Returns all numerically indexed elements from a table
function unpack (t, i, reverse)
  reverse = reverse or false
  if not reverse then
    i = i or 1
    if t[i] ~= nil then
      return t[i], unpack(t, i + 1, reverse)
    end
  else
    i=i or false --copies t to a working table instead of
    if not i then -- a direct reference
      workingT={}
      for key, value in pairs(t) do
        workingT[key]=value
      end
    else
      workingT=t
    end
    for key, value in pairs(workingT) do
      local output=key
      workingT[key]=nil
      return output, unpack(workingT, true, true)
    end
  end
end

--Splits a table up and returns the denoted field as a table or 
--a table of the field tables if field is nil
function splitTable(t, del, field)
  field = field or nil
  local output={}
  local counter=1
  for key, entry in pairs(t) do
    if key ~= "length" and key ~= "lines" then
      if field ~= nil then
        output[counter]=split(entry, del)[field]
      else
        output[counter]=split(entry, del)
      end
    end
    counter=counter+1
  end
  return output
end

--sorts alphabetically(and maybe numerically)
function sort (t, doSortValues)
  if doSortValues == nil then doSortValues=true end
  local output={}
  if doSortValues then
    for key, value in pairs(t) do table.insert(output, value) end
  else
    for key, value in pairs(t) do table.insert(output, key) end
  end
  table.sort(output)
  return output
end   

--Searches a table for a string
function search (t, str, searchVal)
  local searchVal=searchVal or true
  local output={}
  for key, value in pairs(t) do
    if searchVal then
      for match in value:gmatch(str:gsub("%-","%%-")) do table.insert(output, value) end
    else
      for match in keys:gmatch(str:gsub("%-","%%-")) do table.insert(output, key) end
    end
  end
  return output
end

--Searches a table by value and returns the key
function searchKey(t, val)
  local output={}
  local index=1
  for key, value in pairs(t) do
    for match in value:gmatch(val:gsub("%-", "%%-")) do
      table.insert(output, index, key)
      index=index+1
    end
  end
  return output
end

--Rounds a number to a digits number of decimals
function roundDig(num, digits)
  return math.floor(num*math.pow(10, digits))/math.pow(10,digits)
end

--bot functions

--Moves the player by a float number of blocks, dependent on original orientation, can handle angles.
--Returns the error, positive error means you went further than necessary. Error seems to be within 0-0.05m
--moveDistance(float:blocks, String:[forward|left|right|back], <Boolean:debug>)
function moveDistance(blocks, dir, doCrouch, debug)
  if debug == nil then debug=false end
  if doCrouch == nil then doCrouch=true end
  local yawAddend=0  
  if dir == "left" then
    yawAddend=-90
  elseif dir == "right" then
    yawAddend=90
  elseif dir == "back" then
    yawAddend=180
  else
    yawAddend=0
  end
  local x, y, z = getPlayerPos()
  local player = getPlayer() --south=+z, west=-x, north=-z, east=+x
  local yaw = player.yaw --0=south, 90=west, 180=North, -90=East
  local pitch = player.pitch
  
  --blocks+1 gives a target 1 block's distance from the actual
  --target, so if distance < 1 you can stop. workaround for rare bugs.
  local targetX=x - (blocks+1) * math.sin((yaw+yawAddend) * math.pi / 180)
  local targetZ=z + (blocks+1) * math.cos((yaw+yawAddend) * math.pi / 180)
  if debug then
    log("Target: ("..targetX..","..targetZ..")")
    log("Position: ("..x..","..z..")")
  end
  local distance = math.sqrt(math.pow(targetX-x, 2) + math.pow(targetZ-z, 2))
  while distance > 1 do
    x, y, z = getPlayerPos()
    distance = math.sqrt(math.pow(targetX-x, 2) + math.pow(targetZ-z, 2))
    if debug then
      log("Distance From Target: "..distance)
    end
    --There seems to be a bug in which after running a certain number of times,
    --it will stop and start and lag significantly if look(yaw, pitch) isn't commented out
    --look(yaw, pitch)
    if distance < 2 and doCrouch then
      sneak(-1)
    end
    local moveTime = 1
    if dir == "left" then
        left(moveTime)
    elseif dir == "right" then
        right(moveTime)
    elseif dir == "back" then
        back(moveTime)
    else
        forward(moveTime)
    end
  end
  sneak(100)
  sneak(0)
  --returns error amount
  x,y,z = getPlayerPos()
  distance=math.sqrt(math.pow(targetX-x, 2) + math.pow(targetZ-z, 2))
  return 1-distance
end

--Selects an item on your hotbar based on the minecraft id(not numerical)
--E.G. selectItem("stone_button"), not selectItem("minecraft:stone_button")
function selectItem(itemId)
  local inv=getInventory()
  for id, item in pairs(inv) do
    if id < 10 then
      if item ~= false then
        if item["id"] == "minecraft:"..tostring(itemId) then
          setHotbar(id)
        end
      end
    end
  end
end

--Looks at a block relative to facing
function lookRel(u, v, w)
  --+u, +v, +w correspond to forward, right, and up respectively
  --w axis is always perpendicular to the horizon
  --so w is only perpendicular to the uv plane when pitch = 0
  
  if u == 0 and v == 0 then
    log("ERROR: Cannot look inside yourself.")
    u = 1
  end
  local yaw = getPlayer().yaw
  local pitch = getPlayer().pitch

  local x, y, z = getPlayerPos()
  local r = math.sqrt(math.pow(u, 2)+math.pow(v, 2))
  local yawAddend
  --Quadrant I
  if u >= 0 and v >= 0 then
    yawAddend = math.acos(u/r)
  --Quadrant II
  elseif u >= 0 and v < 0 then
    yawAddend = -math.acos(u/r)
  --Quadrant III
  elseif u < 0 and v < 0 then
    yawAddend = -math.acos(u/r)
  --Quadrant IV
  elseif u < 0 and v >= 0 then
    yawAddend = math.pi/2 - math.asin(u/r)
  end
  local targetYaw = ((yaw*math.pi/180) + yawAddend)
  --log(targetYaw*180/math.pi%360)
  local targetX = x - r*math.sin(targetYaw)
  local targetY = y + w
  local targetZ = z + r*math.cos(targetYaw)
  lookAt(targetX, targetY, targetZ)
end

--Looks in a given cardinal direction
function lookDir(dir)
  local pitch = getPlayer().pitch
  if dir == "South" or dir == "south" then
    look(0, pitch)
  elseif dir == "West" or dir == "west" then
    look(90, pitch)
  elseif dir == "East" or dir == "east" then
    look(-90, pitch)
  else look(180, pitch)
  end
end

--Command Functions

--Gets just the typed string without any prefixes in chat
function stripUsername(chatLine, unformattedChatLine)
  --chat group: &8 SpiderString_: <text>
  --global: &F <SpiderString_> <text>
  --/msg: &d To SpiderString_: <text>
  
  local output=nil
  local player=nil
  if chatLine:match("&8%[") then
    local a = unformattedChatLine:find(":")
    local b = unformattedChatLine:find(" ")
    if a ~= nil and b ~= nil then
      player=unformattedChatLine:sub(b+1, a-1)
      output=unformattedChatLine:sub(a+1)
    end
  elseif chatLine:match("&f<") then
    local a = unformattedChatLine:find(">")
    local b = unformattedChatLine:find("<")
    if a ~= nil and b ~= nil then
      player=unformattedChatLine:sub(b+1, a-1)
      output=unformattedChatLine:sub(a+1)
    end
  elseif chatLine:match("&dTo") then
    local a=unformattedChatLine:find(":")
    player=getPlayer()["name"]
    if a ~= nil then
      output=unformattedChatLine:sub(a+1)
    end
  else
    output=false
  end
  if output == nil then output=false end
  if output ~= false then output=output:gsub("^[%s]*", "") end
  return output, player
end
--Takes a command prefix and unformatted string and returns the command and a table of arguments
function getCommand(commandPrefix, chatline)
  local command
  if chatline~=nil then  
    if type(chatline) == "string" then
      chatline=chatline:gsub("^[%s]*", "")
      if chatline:match("^"..commandPrefix) then
        command=chatline:gsub("^"..commandPrefix, "")
        command=command:gsub("^[%s]*", "")
        command:lower()
      else
        command=false
      end
    else
      command=false
    end
  else
    command=false
  end
  local commandArgs
  if command ~= false then
    local line=command
    command=split(command, " ")[1]
    line=line:gsub("%%", "%%%%")
    command=command:gsub("%%", "%%%%")
    commandArgs=line:gsub(command:gsub("-", "%%-").."[%s]*", "")
    commandArgs=split(commandArgs, " ")
  end
  return command, commandArgs
end
