local args={...}
local forceUpgrade=args[1]

--config options, these are defaults and will be overwritten by (valid) options in the config
local packageVersionsPath="~/macros/CobwebPackageManager/packageVersions"
local autoUpdateColor="&6" --gold
local statusColor="&b" --aqua

local doUpdate=false
doUpdate=doUpdate or forceUpgrade

function updateSettings()
  run("fileLib")
  local settings=readConfig()
  packageVersionsPath=settings["packageVersionsPath"]
  autoUpdateColor=settings["autoUpdateColor"]
  statusColor=settings["statusColor"]
end
function getInstalledPackages()
  updateSettings()

  run("spiderLib")
  local versionsFile=catRel(packageVersionsPath)
  local packages={}
  for id, line in pairs(versionsFile) do
    local package=line:sub(1, line:find(":")-1):gsub("[%s]+", "")
    table.insert(packages, package)
  end
  return packages
end

function upgrade()
  updateSettings()

  advLog({text="Checking for updates", color=autoUpdateColor})
  advLog({text="Found "..getRepositories(true).." new packages", color=autoUpdateColor})
  local newPackages={}
  local upgraded=0
  for id, package in pairs(getInstalledPackages()) do
    local newPackage=getPackage(package,true)
    if newPackage~=nil then
      table.insert(newPackages, newPackage)
      upgraded=upgraded+1
    end
  end
  local newPackageString=""
  for id, package in pairs(newPackages) do
    newPackageString=newPackageString..", "..package
  end
  newPackageString=newPackageString:gsub("^, ", "")
  local suffix="es" --"0 packages", "1 package"
  if upgraded==1 then
    suffix="e"
  end
  log(autoUpdateColor.."Upgrades Complete. [&N"..statusColor..upgraded..autoUpdateColor.."] Packag"..suffix.." Upgraded", newPackageString)

end

if doUpdate then
  upgrade()
end
