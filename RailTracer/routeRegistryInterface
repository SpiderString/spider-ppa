local args={...} --should be bound to ChatSendFilter
local commandPrefix="!rt"
local routeRegDir="common"
local routeRegPath=routeRegDir.."/routeRegistry"
if not filesystem.exists(routeRegDir) then filesystem.mkDir(routeRegDir) end
if not filesystem.exists(routeRegPath) then filesystem.open(routeRegPath, "w"):close() end

local routeReg
local blockTex="block:minecraft:blocks/glass_lime"
local xray=true
run("RailTracer/railTracerLib")
run("RailTracer/spiderLib")

function getRoutes()
  local currentLine=1
  local routes={}
  local currentRoute={}
  local percentage=0
  log("0% loaded")
  while currentLine <= routeReg["lines"] do
    currentRoute, currentLine=getRoute(routeReg, currentLine)
    table.insert(routes, currentRoute)
    currentRoute={}
    percentage=roundDig((currentLine/routeReg["lines"])*100, 2)
    log(percentage.."% loaded")
  end
  return routes
end

function getNames(routes)
  local names={}
  for id, route in pairs(routes) do
    table.insert(names, route["name"])
  end
  return names
end

function findRoute(routes, name)
  local output=nil
  for id, route in pairs(routes) do
    if route["name"]==name then
      output=route
    end
  end
  return output
end

function getDistance(route)
  local distance=0
  for id, point in pairs(route["path"]) do
    distance=distance+1
  end
  return distance
end

function drawBlock(x, y, z)
  local block=hud3D.newBlock()
  block.setPos(x, y, z)
  block.xray(xray)
  block.changeTexture(blockTex)
  block.enableDraw()
end

function drawRoute(route)
  local path=route["path"]
  for id, point in pairs(path) do
    drawBlock(point.x, point.y, point.z)
  end
end

function deleteRoute(routes, routeName)
  for id, currentRoute in pairs(routes) do
    if currentRoute["name"]==routeName then
      routes[id]=nil
    end
  end
  local newRouteReg=filesystem.open(routeRegPath, "w")
  newRouteReg:close()
  for id, currentRoute in pairs(routes) do
    logRoute(routeRegPath, currentRoute, true)
  end
end

function parseCommands(chatLine)
  --local command, caller=stripUsername(chatLine, unformattedChatLine)
  local commandArgs
  command, commandArgs=getCommand(commandPrefix, chatLine)
  local self=getPlayer()["name"]
  --no command
  if command==false or command==nil then
    return args[3]
  --parse command
  elseif command~=false then
    --Begin command Matching
    routeReg=catRel(routeRegPath, true)
    --lists info on a route
    if command=="list" then
      local routes=getRoutes()
      local names=getNames(routes)
      local routeChoice=prompt("Pick a Route", "choice", unpack(sort(names)))
      if routeChoice~=nil then
        local route=findRoute(routes, routeChoice)
        log(routeChoice)
        log("Estimated Length: "..getDistance(route))
      end
    --draws a line of holoblocks
    elseif command=="trace" then
      local routes=getRoutes()
      if commandArgs[1]==nil then
        local names=getNames(routes)
        local routeChoice=prompt("Pick a Route", "choice", unpack(sort(names)))
        if routeChoice~=nil then
          local route=findRoute(routes, routeChoice)
          drawRoute(route)
        end
      else
        local route=findRoute(routes, commandArgs[1])
        if route==nil then
          log("No route exists with the name '"..commandArgs[1].."'")
        else
          drawRoute(route)
        end
      end
    elseif command=="clear" then
      hud3D.clearAll()
    elseif command=="delete" then
      local routes=getRoutes()
      if commandArgs[1]~=nil then
        local route=findRoute(routes, commandArgs[1])
        if route==nil then
          log("No route exists with the name '"..commandArgs[1].."'")
        else
          deleteRoute(routes, commandArgs[1])
        end
      else
        local names=getNames(routes)
        local routeChoice=prompt("Pick a Route", "choice", unpack(sort(names)))
        if routeChoice~=nil then
          local confirm=prompt("Are you sure you want to delete "..routeChoice.."?", "choice", "Yes", "No")
          if confirm=="Yes" then
            deleteRoute(routes, routeChoice)
          end
        end
      end
    elseif command=="record" then
      run("RailTracer/railTracerMain")
    end
  end
end
if args[2]=="ChatSendFilter" then
  local output=parseCommands(args[3])
  return output
end
